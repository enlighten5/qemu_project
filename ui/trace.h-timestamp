/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_UI_GENERATED_TRACERS_H
#define TRACE_UI_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_CONSOLE_GFX_NEW_EVENT;
extern TraceEvent _TRACE_CONSOLE_PUTCHAR_CSI_EVENT;
extern TraceEvent _TRACE_CONSOLE_PUTCHAR_UNHANDLED_EVENT;
extern TraceEvent _TRACE_CONSOLE_TXT_NEW_EVENT;
extern TraceEvent _TRACE_CONSOLE_SELECT_EVENT;
extern TraceEvent _TRACE_CONSOLE_REFRESH_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_CREATE_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_CREATE_FROM_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_CREATE_PIXMAN_EVENT;
extern TraceEvent _TRACE_DISPLAYSURFACE_FREE_EVENT;
extern TraceEvent _TRACE_DISPLAYCHANGELISTENER_REGISTER_EVENT;
extern TraceEvent _TRACE_DISPLAYCHANGELISTENER_UNREGISTER_EVENT;
extern TraceEvent _TRACE_PPM_SAVE_EVENT;
extern TraceEvent _TRACE_GD_SWITCH_EVENT;
extern TraceEvent _TRACE_GD_UPDATE_EVENT;
extern TraceEvent _TRACE_GD_KEY_EVENT_EVENT;
extern TraceEvent _TRACE_GD_GRAB_EVENT;
extern TraceEvent _TRACE_GD_UNGRAB_EVENT;
extern TraceEvent _TRACE_GD_KEYMAP_WINDOWING_EVENT;
extern TraceEvent _TRACE_VNC_KEY_GUEST_LEDS_EVENT;
extern TraceEvent _TRACE_VNC_KEY_MAP_INIT_EVENT;
extern TraceEvent _TRACE_VNC_KEY_EVENT_EXT_EVENT;
extern TraceEvent _TRACE_VNC_KEY_EVENT_MAP_EVENT;
extern TraceEvent _TRACE_VNC_KEY_SYNC_NUMLOCK_EVENT;
extern TraceEvent _TRACE_VNC_KEY_SYNC_CAPSLOCK_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_EOF_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_IO_ERROR_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_CONNECT_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_DISCONNECT_START_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_DISCONNECT_FINISH_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_IO_WRAP_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_FORCED_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_THROTTLE_AUDIO_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_EVENT;
extern TraceEvent _TRACE_VNC_CLIENT_OUTPUT_LIMIT_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_INIT_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_START_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_PASS_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_FAIL_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_REJECT_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_VENCRYPT_VERSION_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_MECH_LIST_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_MECH_CHOOSE_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_START_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_STEP_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_SSF_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_USERNAME_EVENT;
extern TraceEvent _TRACE_VNC_AUTH_SASL_ACL_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_KEY_NUMBER_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_KEY_QCODE_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_BTN_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_REL_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_ABS_EVENT;
extern TraceEvent _TRACE_INPUT_EVENT_SYNC_EVENT;
extern TraceEvent _TRACE_INPUT_MOUSE_MODE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_ADD_MEMSLOT_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DEL_MEMSLOT_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_WAKEUP_EVENT;
extern TraceEvent _TRACE_QEMU_SPICE_CREATE_UPDATE_EVENT;
extern TraceEvent _TRACE_KEYMAP_PARSE_EVENT;
extern TraceEvent _TRACE_KEYMAP_ADD_EVENT;
extern TraceEvent _TRACE_KEYMAP_UNMAPPED_EVENT;
extern TraceEvent _TRACE_XKEYMAP_EXTENSION_EVENT;
extern TraceEvent _TRACE_XKEYMAP_VENDOR_EVENT;
extern TraceEvent _TRACE_XKEYMAP_KEYCODES_EVENT;
extern TraceEvent _TRACE_XKEYMAP_KEYMAP_EVENT;
extern uint16_t _TRACE_CONSOLE_GFX_NEW_DSTATE;
extern uint16_t _TRACE_CONSOLE_PUTCHAR_CSI_DSTATE;
extern uint16_t _TRACE_CONSOLE_PUTCHAR_UNHANDLED_DSTATE;
extern uint16_t _TRACE_CONSOLE_TXT_NEW_DSTATE;
extern uint16_t _TRACE_CONSOLE_SELECT_DSTATE;
extern uint16_t _TRACE_CONSOLE_REFRESH_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_CREATE_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_CREATE_FROM_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_CREATE_PIXMAN_DSTATE;
extern uint16_t _TRACE_DISPLAYSURFACE_FREE_DSTATE;
extern uint16_t _TRACE_DISPLAYCHANGELISTENER_REGISTER_DSTATE;
extern uint16_t _TRACE_DISPLAYCHANGELISTENER_UNREGISTER_DSTATE;
extern uint16_t _TRACE_PPM_SAVE_DSTATE;
extern uint16_t _TRACE_GD_SWITCH_DSTATE;
extern uint16_t _TRACE_GD_UPDATE_DSTATE;
extern uint16_t _TRACE_GD_KEY_EVENT_DSTATE;
extern uint16_t _TRACE_GD_GRAB_DSTATE;
extern uint16_t _TRACE_GD_UNGRAB_DSTATE;
extern uint16_t _TRACE_GD_KEYMAP_WINDOWING_DSTATE;
extern uint16_t _TRACE_VNC_KEY_GUEST_LEDS_DSTATE;
extern uint16_t _TRACE_VNC_KEY_MAP_INIT_DSTATE;
extern uint16_t _TRACE_VNC_KEY_EVENT_EXT_DSTATE;
extern uint16_t _TRACE_VNC_KEY_EVENT_MAP_DSTATE;
extern uint16_t _TRACE_VNC_KEY_SYNC_NUMLOCK_DSTATE;
extern uint16_t _TRACE_VNC_KEY_SYNC_CAPSLOCK_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_EOF_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_IO_ERROR_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_CONNECT_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_DISCONNECT_START_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_DISCONNECT_FINISH_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_IO_WRAP_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_FORCED_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_THROTTLE_AUDIO_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_DSTATE;
extern uint16_t _TRACE_VNC_CLIENT_OUTPUT_LIMIT_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_INIT_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_START_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_PASS_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_FAIL_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_REJECT_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_VENCRYPT_VERSION_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_MECH_LIST_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_MECH_CHOOSE_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_START_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_STEP_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_SSF_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_USERNAME_DSTATE;
extern uint16_t _TRACE_VNC_AUTH_SASL_ACL_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_KEY_NUMBER_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_KEY_QCODE_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_BTN_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_REL_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_ABS_DSTATE;
extern uint16_t _TRACE_INPUT_EVENT_SYNC_DSTATE;
extern uint16_t _TRACE_INPUT_MOUSE_MODE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_ADD_MEMSLOT_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DEL_MEMSLOT_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_WAKEUP_DSTATE;
extern uint16_t _TRACE_QEMU_SPICE_CREATE_UPDATE_DSTATE;
extern uint16_t _TRACE_KEYMAP_PARSE_DSTATE;
extern uint16_t _TRACE_KEYMAP_ADD_DSTATE;
extern uint16_t _TRACE_KEYMAP_UNMAPPED_DSTATE;
extern uint16_t _TRACE_XKEYMAP_EXTENSION_DSTATE;
extern uint16_t _TRACE_XKEYMAP_VENDOR_DSTATE;
extern uint16_t _TRACE_XKEYMAP_KEYCODES_DSTATE;
extern uint16_t _TRACE_XKEYMAP_KEYMAP_DSTATE;
#define TRACE_CONSOLE_GFX_NEW_ENABLED 1
#define TRACE_CONSOLE_PUTCHAR_CSI_ENABLED 1
#define TRACE_CONSOLE_PUTCHAR_UNHANDLED_ENABLED 1
#define TRACE_CONSOLE_TXT_NEW_ENABLED 1
#define TRACE_CONSOLE_SELECT_ENABLED 1
#define TRACE_CONSOLE_REFRESH_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_FROM_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_PIXMAN_ENABLED 1
#define TRACE_DISPLAYSURFACE_FREE_ENABLED 1
#define TRACE_DISPLAYCHANGELISTENER_REGISTER_ENABLED 1
#define TRACE_DISPLAYCHANGELISTENER_UNREGISTER_ENABLED 1
#define TRACE_PPM_SAVE_ENABLED 1
#define TRACE_GD_SWITCH_ENABLED 1
#define TRACE_GD_UPDATE_ENABLED 1
#define TRACE_GD_KEY_EVENT_ENABLED 1
#define TRACE_GD_GRAB_ENABLED 1
#define TRACE_GD_UNGRAB_ENABLED 1
#define TRACE_GD_KEYMAP_WINDOWING_ENABLED 1
#define TRACE_VNC_KEY_GUEST_LEDS_ENABLED 1
#define TRACE_VNC_KEY_MAP_INIT_ENABLED 1
#define TRACE_VNC_KEY_EVENT_EXT_ENABLED 1
#define TRACE_VNC_KEY_EVENT_MAP_ENABLED 1
#define TRACE_VNC_KEY_SYNC_NUMLOCK_ENABLED 1
#define TRACE_VNC_KEY_SYNC_CAPSLOCK_ENABLED 1
#define TRACE_VNC_CLIENT_EOF_ENABLED 1
#define TRACE_VNC_CLIENT_IO_ERROR_ENABLED 1
#define TRACE_VNC_CLIENT_CONNECT_ENABLED 1
#define TRACE_VNC_CLIENT_DISCONNECT_START_ENABLED 1
#define TRACE_VNC_CLIENT_DISCONNECT_FINISH_ENABLED 1
#define TRACE_VNC_CLIENT_IO_WRAP_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_FORCED_ENABLED 1
#define TRACE_VNC_CLIENT_THROTTLE_AUDIO_ENABLED 1
#define TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_ENABLED 1
#define TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_ENABLED 1
#define TRACE_VNC_CLIENT_OUTPUT_LIMIT_ENABLED 1
#define TRACE_VNC_AUTH_INIT_ENABLED 1
#define TRACE_VNC_AUTH_START_ENABLED 1
#define TRACE_VNC_AUTH_PASS_ENABLED 1
#define TRACE_VNC_AUTH_FAIL_ENABLED 1
#define TRACE_VNC_AUTH_REJECT_ENABLED 1
#define TRACE_VNC_AUTH_VENCRYPT_VERSION_ENABLED 1
#define TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_ENABLED 1
#define TRACE_VNC_AUTH_SASL_MECH_LIST_ENABLED 1
#define TRACE_VNC_AUTH_SASL_MECH_CHOOSE_ENABLED 1
#define TRACE_VNC_AUTH_SASL_START_ENABLED 1
#define TRACE_VNC_AUTH_SASL_STEP_ENABLED 1
#define TRACE_VNC_AUTH_SASL_SSF_ENABLED 1
#define TRACE_VNC_AUTH_SASL_USERNAME_ENABLED 1
#define TRACE_VNC_AUTH_SASL_ACL_ENABLED 1
#define TRACE_INPUT_EVENT_KEY_NUMBER_ENABLED 1
#define TRACE_INPUT_EVENT_KEY_QCODE_ENABLED 1
#define TRACE_INPUT_EVENT_BTN_ENABLED 1
#define TRACE_INPUT_EVENT_REL_ENABLED 1
#define TRACE_INPUT_EVENT_ABS_ENABLED 1
#define TRACE_INPUT_EVENT_SYNC_ENABLED 1
#define TRACE_INPUT_MOUSE_MODE_ENABLED 1
#define TRACE_QEMU_SPICE_ADD_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_DEL_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_WAKEUP_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_UPDATE_ENABLED 1
#define TRACE_KEYMAP_PARSE_ENABLED 1
#define TRACE_KEYMAP_ADD_ENABLED 1
#define TRACE_KEYMAP_UNMAPPED_ENABLED 1
#define TRACE_XKEYMAP_EXTENSION_ENABLED 1
#define TRACE_XKEYMAP_VENDOR_ENABLED 1
#define TRACE_XKEYMAP_KEYCODES_ENABLED 1
#define TRACE_XKEYMAP_KEYMAP_ENABLED 1
#include "qemu/log.h"


#define TRACE_CONSOLE_GFX_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_GFX_NEW) || \
    false)

static inline void _nocheck__trace_console_gfx_new(void)
{
    if (trace_event_get_state(TRACE_CONSOLE_GFX_NEW)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:console_gfx_new " "" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_console_gfx_new(void)
{
    if (true) {
        _nocheck__trace_console_gfx_new();
    }
}

#define TRACE_CONSOLE_PUTCHAR_CSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_PUTCHAR_CSI) || \
    false)

static inline void _nocheck__trace_console_putchar_csi(int esc_param0, int esc_param1, int ch, int nb_esc_params)
{
    if (trace_event_get_state(TRACE_CONSOLE_PUTCHAR_CSI)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:console_putchar_csi " "escape sequence CSI%d;%d%c, %d parameters" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , esc_param0, esc_param1, ch, nb_esc_params);
    }
}

static inline void trace_console_putchar_csi(int esc_param0, int esc_param1, int ch, int nb_esc_params)
{
    if (true) {
        _nocheck__trace_console_putchar_csi(esc_param0, esc_param1, ch, nb_esc_params);
    }
}

#define TRACE_CONSOLE_PUTCHAR_UNHANDLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_PUTCHAR_UNHANDLED) || \
    false)

static inline void _nocheck__trace_console_putchar_unhandled(int ch)
{
    if (trace_event_get_state(TRACE_CONSOLE_PUTCHAR_UNHANDLED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:console_putchar_unhandled " "unhandled escape character '%c'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , ch);
    }
}

static inline void trace_console_putchar_unhandled(int ch)
{
    if (true) {
        _nocheck__trace_console_putchar_unhandled(ch);
    }
}

#define TRACE_CONSOLE_TXT_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_TXT_NEW) || \
    false)

static inline void _nocheck__trace_console_txt_new(int w, int h)
{
    if (trace_event_get_state(TRACE_CONSOLE_TXT_NEW)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:console_txt_new " "%dx%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , w, h);
    }
}

static inline void trace_console_txt_new(int w, int h)
{
    if (true) {
        _nocheck__trace_console_txt_new(w, h);
    }
}

#define TRACE_CONSOLE_SELECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_SELECT) || \
    false)

static inline void _nocheck__trace_console_select(int nr)
{
    if (trace_event_get_state(TRACE_CONSOLE_SELECT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:console_select " "%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , nr);
    }
}

static inline void trace_console_select(int nr)
{
    if (true) {
        _nocheck__trace_console_select(nr);
    }
}

#define TRACE_CONSOLE_REFRESH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CONSOLE_REFRESH) || \
    false)

static inline void _nocheck__trace_console_refresh(int interval)
{
    if (trace_event_get_state(TRACE_CONSOLE_REFRESH)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:console_refresh " "interval %d ms" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , interval);
    }
}

static inline void trace_console_refresh(int interval)
{
    if (true) {
        _nocheck__trace_console_refresh(interval);
    }
}

#define TRACE_DISPLAYSURFACE_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_CREATE) || \
    false)

static inline void _nocheck__trace_displaysurface_create(void * display_surface, int w, int h)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_CREATE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:displaysurface_create " "surface=%p, %dx%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , display_surface, w, h);
    }
}

static inline void trace_displaysurface_create(void * display_surface, int w, int h)
{
    if (true) {
        _nocheck__trace_displaysurface_create(display_surface, w, h);
    }
}

#define TRACE_DISPLAYSURFACE_CREATE_FROM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_CREATE_FROM) || \
    false)

static inline void _nocheck__trace_displaysurface_create_from(void * display_surface, int w, int h, uint32_t format)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_CREATE_FROM)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:displaysurface_create_from " "surface=%p, %dx%d, format 0x%x" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , display_surface, w, h, format);
    }
}

static inline void trace_displaysurface_create_from(void * display_surface, int w, int h, uint32_t format)
{
    if (true) {
        _nocheck__trace_displaysurface_create_from(display_surface, w, h, format);
    }
}

#define TRACE_DISPLAYSURFACE_CREATE_PIXMAN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_CREATE_PIXMAN) || \
    false)

static inline void _nocheck__trace_displaysurface_create_pixman(void * display_surface)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_CREATE_PIXMAN)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:displaysurface_create_pixman " "surface=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , display_surface);
    }
}

static inline void trace_displaysurface_create_pixman(void * display_surface)
{
    if (true) {
        _nocheck__trace_displaysurface_create_pixman(display_surface);
    }
}

#define TRACE_DISPLAYSURFACE_FREE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYSURFACE_FREE) || \
    false)

static inline void _nocheck__trace_displaysurface_free(void * display_surface)
{
    if (trace_event_get_state(TRACE_DISPLAYSURFACE_FREE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:displaysurface_free " "surface=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , display_surface);
    }
}

static inline void trace_displaysurface_free(void * display_surface)
{
    if (true) {
        _nocheck__trace_displaysurface_free(display_surface);
    }
}

#define TRACE_DISPLAYCHANGELISTENER_REGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYCHANGELISTENER_REGISTER) || \
    false)

static inline void _nocheck__trace_displaychangelistener_register(void * dcl, const char * name)
{
    if (trace_event_get_state(TRACE_DISPLAYCHANGELISTENER_REGISTER)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:displaychangelistener_register " "%p [ %s ]" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , dcl, name);
    }
}

static inline void trace_displaychangelistener_register(void * dcl, const char * name)
{
    if (true) {
        _nocheck__trace_displaychangelistener_register(dcl, name);
    }
}

#define TRACE_DISPLAYCHANGELISTENER_UNREGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DISPLAYCHANGELISTENER_UNREGISTER) || \
    false)

static inline void _nocheck__trace_displaychangelistener_unregister(void * dcl, const char * name)
{
    if (trace_event_get_state(TRACE_DISPLAYCHANGELISTENER_UNREGISTER)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:displaychangelistener_unregister " "%p [ %s ]" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , dcl, name);
    }
}

static inline void trace_displaychangelistener_unregister(void * dcl, const char * name)
{
    if (true) {
        _nocheck__trace_displaychangelistener_unregister(dcl, name);
    }
}

#define TRACE_PPM_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PPM_SAVE) || \
    false)

static inline void _nocheck__trace_ppm_save(const char * filename, void * display_surface)
{
    if (trace_event_get_state(TRACE_PPM_SAVE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:ppm_save " "%s surface=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , filename, display_surface);
    }
}

static inline void trace_ppm_save(const char * filename, void * display_surface)
{
    if (true) {
        _nocheck__trace_ppm_save(filename, display_surface);
    }
}

#define TRACE_GD_SWITCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_SWITCH) || \
    false)

static inline void _nocheck__trace_gd_switch(const char * tab, int width, int height)
{
    if (trace_event_get_state(TRACE_GD_SWITCH)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:gd_switch " "tab=%s, width=%d, height=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , tab, width, height);
    }
}

static inline void trace_gd_switch(const char * tab, int width, int height)
{
    if (true) {
        _nocheck__trace_gd_switch(tab, width, height);
    }
}

#define TRACE_GD_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_UPDATE) || \
    false)

static inline void _nocheck__trace_gd_update(const char * tab, int x, int y, int w, int h)
{
    if (trace_event_get_state(TRACE_GD_UPDATE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:gd_update " "tab=%s, x=%d, y=%d, w=%d, h=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , tab, x, y, w, h);
    }
}

static inline void trace_gd_update(const char * tab, int x, int y, int w, int h)
{
    if (true) {
        _nocheck__trace_gd_update(tab, x, y, w, h);
    }
}

#define TRACE_GD_KEY_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_KEY_EVENT) || \
    false)

static inline void _nocheck__trace_gd_key_event(const char * tab, int gdk_keycode, int qkeycode, const char * action)
{
    if (trace_event_get_state(TRACE_GD_KEY_EVENT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:gd_key_event " "tab=%s, translated GDK keycode %d to QKeyCode %d (%s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , tab, gdk_keycode, qkeycode, action);
    }
}

static inline void trace_gd_key_event(const char * tab, int gdk_keycode, int qkeycode, const char * action)
{
    if (true) {
        _nocheck__trace_gd_key_event(tab, gdk_keycode, qkeycode, action);
    }
}

#define TRACE_GD_GRAB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_GRAB) || \
    false)

static inline void _nocheck__trace_gd_grab(const char * tab, const char * device, const char * reason)
{
    if (trace_event_get_state(TRACE_GD_GRAB)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:gd_grab " "tab=%s, dev=%s, reason=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , tab, device, reason);
    }
}

static inline void trace_gd_grab(const char * tab, const char * device, const char * reason)
{
    if (true) {
        _nocheck__trace_gd_grab(tab, device, reason);
    }
}

#define TRACE_GD_UNGRAB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_UNGRAB) || \
    false)

static inline void _nocheck__trace_gd_ungrab(const char * tab, const char * device)
{
    if (trace_event_get_state(TRACE_GD_UNGRAB)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:gd_ungrab " "tab=%s, dev=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , tab, device);
    }
}

static inline void trace_gd_ungrab(const char * tab, const char * device)
{
    if (true) {
        _nocheck__trace_gd_ungrab(tab, device);
    }
}

#define TRACE_GD_KEYMAP_WINDOWING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GD_KEYMAP_WINDOWING) || \
    false)

static inline void _nocheck__trace_gd_keymap_windowing(const char * name)
{
    if (trace_event_get_state(TRACE_GD_KEYMAP_WINDOWING)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:gd_keymap_windowing " "backend=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_gd_keymap_windowing(const char * name)
{
    if (true) {
        _nocheck__trace_gd_keymap_windowing(name);
    }
}

#define TRACE_VNC_KEY_GUEST_LEDS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_GUEST_LEDS) || \
    false)

static inline void _nocheck__trace_vnc_key_guest_leds(bool caps, bool num, bool scroll)
{
    if (trace_event_get_state(TRACE_VNC_KEY_GUEST_LEDS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_key_guest_leds " "caps %d, num %d, scroll %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , caps, num, scroll);
    }
}

static inline void trace_vnc_key_guest_leds(bool caps, bool num, bool scroll)
{
    if (true) {
        _nocheck__trace_vnc_key_guest_leds(caps, num, scroll);
    }
}

#define TRACE_VNC_KEY_MAP_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_MAP_INIT) || \
    false)

static inline void _nocheck__trace_vnc_key_map_init(const char * layout)
{
    if (trace_event_get_state(TRACE_VNC_KEY_MAP_INIT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_key_map_init " "%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , layout);
    }
}

static inline void trace_vnc_key_map_init(const char * layout)
{
    if (true) {
        _nocheck__trace_vnc_key_map_init(layout);
    }
}

#define TRACE_VNC_KEY_EVENT_EXT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_EVENT_EXT) || \
    false)

static inline void _nocheck__trace_vnc_key_event_ext(bool down, int sym, int keycode, const char * name)
{
    if (trace_event_get_state(TRACE_VNC_KEY_EVENT_EXT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_key_event_ext " "down %d, sym 0x%x, keycode 0x%x [%s]" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , down, sym, keycode, name);
    }
}

static inline void trace_vnc_key_event_ext(bool down, int sym, int keycode, const char * name)
{
    if (true) {
        _nocheck__trace_vnc_key_event_ext(down, sym, keycode, name);
    }
}

#define TRACE_VNC_KEY_EVENT_MAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_EVENT_MAP) || \
    false)

static inline void _nocheck__trace_vnc_key_event_map(bool down, int sym, int keycode, const char * name)
{
    if (trace_event_get_state(TRACE_VNC_KEY_EVENT_MAP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_key_event_map " "down %d, sym 0x%x -> keycode 0x%x [%s]" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , down, sym, keycode, name);
    }
}

static inline void trace_vnc_key_event_map(bool down, int sym, int keycode, const char * name)
{
    if (true) {
        _nocheck__trace_vnc_key_event_map(down, sym, keycode, name);
    }
}

#define TRACE_VNC_KEY_SYNC_NUMLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_SYNC_NUMLOCK) || \
    false)

static inline void _nocheck__trace_vnc_key_sync_numlock(bool on)
{
    if (trace_event_get_state(TRACE_VNC_KEY_SYNC_NUMLOCK)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_key_sync_numlock " "%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , on);
    }
}

static inline void trace_vnc_key_sync_numlock(bool on)
{
    if (true) {
        _nocheck__trace_vnc_key_sync_numlock(on);
    }
}

#define TRACE_VNC_KEY_SYNC_CAPSLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_KEY_SYNC_CAPSLOCK) || \
    false)

static inline void _nocheck__trace_vnc_key_sync_capslock(bool on)
{
    if (trace_event_get_state(TRACE_VNC_KEY_SYNC_CAPSLOCK)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_key_sync_capslock " "%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , on);
    }
}

static inline void trace_vnc_key_sync_capslock(bool on)
{
    if (true) {
        _nocheck__trace_vnc_key_sync_capslock(on);
    }
}

#define TRACE_VNC_CLIENT_EOF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_EOF) || \
    false)

static inline void _nocheck__trace_vnc_client_eof(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_EOF)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_eof " "VNC client EOF state=%p ioc=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc);
    }
}

static inline void trace_vnc_client_eof(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_eof(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_IO_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_IO_ERROR) || \
    false)

static inline void _nocheck__trace_vnc_client_io_error(void * state, void * ioc, const char * msg)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_IO_ERROR)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_io_error " "VNC client I/O error state=%p ioc=%p errmsg=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, msg);
    }
}

static inline void trace_vnc_client_io_error(void * state, void * ioc, const char * msg)
{
    if (true) {
        _nocheck__trace_vnc_client_io_error(state, ioc, msg);
    }
}

#define TRACE_VNC_CLIENT_CONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_CONNECT) || \
    false)

static inline void _nocheck__trace_vnc_client_connect(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_CONNECT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_connect " "VNC client connect state=%p ioc=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc);
    }
}

static inline void trace_vnc_client_connect(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_connect(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_DISCONNECT_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_DISCONNECT_START) || \
    false)

static inline void _nocheck__trace_vnc_client_disconnect_start(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_DISCONNECT_START)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_disconnect_start " "VNC client disconnect start state=%p ioc=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc);
    }
}

static inline void trace_vnc_client_disconnect_start(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_disconnect_start(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_DISCONNECT_FINISH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_DISCONNECT_FINISH) || \
    false)

static inline void _nocheck__trace_vnc_client_disconnect_finish(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_DISCONNECT_FINISH)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_disconnect_finish " "VNC client disconnect finish state=%p ioc=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc);
    }
}

static inline void trace_vnc_client_disconnect_finish(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_disconnect_finish(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_IO_WRAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_IO_WRAP) || \
    false)

static inline void _nocheck__trace_vnc_client_io_wrap(void * state, void * ioc, const char * type)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_IO_WRAP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_io_wrap " "VNC client I/O wrap state=%p ioc=%p type=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, type);
    }
}

static inline void trace_vnc_client_io_wrap(void * state, void * ioc, const char * type)
{
    if (true) {
        _nocheck__trace_vnc_client_io_wrap(state, ioc, type);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_THRESHOLD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_THRESHOLD) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_threshold(void * state, void * ioc, size_t oldoffset, size_t offset, int client_width, int client_height, int bytes_per_pixel, void * audio_cap)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_THRESHOLD)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_throttle_threshold " "VNC client throttle threshold state=%p ioc=%p oldoffset=%zu newoffset=%zu width=%d height=%d bpp=%d audio=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, oldoffset, offset, client_width, client_height, bytes_per_pixel, audio_cap);
    }
}

static inline void trace_vnc_client_throttle_threshold(void * state, void * ioc, size_t oldoffset, size_t offset, int client_width, int client_height, int bytes_per_pixel, void * audio_cap)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_threshold(state, ioc, oldoffset, offset, client_width, client_height, bytes_per_pixel, audio_cap);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_incremental(void * state, void * ioc, int job_update, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_INCREMENTAL)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_throttle_incremental " "VNC client throttle incremental state=%p ioc=%p job-update=%d offset=%zu" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, job_update, offset);
    }
}

static inline void trace_vnc_client_throttle_incremental(void * state, void * ioc, int job_update, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_incremental(state, ioc, job_update, offset);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_FORCED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_FORCED) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_forced(void * state, void * ioc, int job_update, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_FORCED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_throttle_forced " "VNC client throttle forced state=%p ioc=%p job-update=%d offset=%zu" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, job_update, offset);
    }
}

static inline void trace_vnc_client_throttle_forced(void * state, void * ioc, int job_update, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_forced(state, ioc, job_update, offset);
    }
}

#define TRACE_VNC_CLIENT_THROTTLE_AUDIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_THROTTLE_AUDIO) || \
    false)

static inline void _nocheck__trace_vnc_client_throttle_audio(void * state, void * ioc, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_THROTTLE_AUDIO)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_throttle_audio " "VNC client throttle audio state=%p ioc=%p offset=%zu" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, offset);
    }
}

static inline void trace_vnc_client_throttle_audio(void * state, void * ioc, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_throttle_audio(state, ioc, offset);
    }
}

#define TRACE_VNC_CLIENT_UNTHROTTLE_FORCED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_UNTHROTTLE_FORCED) || \
    false)

static inline void _nocheck__trace_vnc_client_unthrottle_forced(void * state, void * ioc)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_UNTHROTTLE_FORCED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_unthrottle_forced " "VNC client unthrottle forced offset state=%p ioc=%p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc);
    }
}

static inline void trace_vnc_client_unthrottle_forced(void * state, void * ioc)
{
    if (true) {
        _nocheck__trace_vnc_client_unthrottle_forced(state, ioc);
    }
}

#define TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL) || \
    false)

static inline void _nocheck__trace_vnc_client_unthrottle_incremental(void * state, void * ioc, size_t offset)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_UNTHROTTLE_INCREMENTAL)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_unthrottle_incremental " "VNC client unthrottle incremental state=%p ioc=%p offset=%zu" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, offset);
    }
}

static inline void trace_vnc_client_unthrottle_incremental(void * state, void * ioc, size_t offset)
{
    if (true) {
        _nocheck__trace_vnc_client_unthrottle_incremental(state, ioc, offset);
    }
}

#define TRACE_VNC_CLIENT_OUTPUT_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_CLIENT_OUTPUT_LIMIT) || \
    false)

static inline void _nocheck__trace_vnc_client_output_limit(void * state, void * ioc, size_t offset, size_t threshold)
{
    if (trace_event_get_state(TRACE_VNC_CLIENT_OUTPUT_LIMIT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_client_output_limit " "VNC client output limit state=%p ioc=%p offset=%zu threshold=%zu" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ioc, offset, threshold);
    }
}

static inline void trace_vnc_client_output_limit(void * state, void * ioc, size_t offset, size_t threshold)
{
    if (true) {
        _nocheck__trace_vnc_client_output_limit(state, ioc, offset, threshold);
    }
}

#define TRACE_VNC_AUTH_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_INIT) || \
    false)

static inline void _nocheck__trace_vnc_auth_init(void * display, int websock, int auth, int subauth)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_INIT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_init " "VNC auth init state=%p websock=%d auth=%d subauth=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , display, websock, auth, subauth);
    }
}

static inline void trace_vnc_auth_init(void * display, int websock, int auth, int subauth)
{
    if (true) {
        _nocheck__trace_vnc_auth_init(display, websock, auth, subauth);
    }
}

#define TRACE_VNC_AUTH_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_START) || \
    false)

static inline void _nocheck__trace_vnc_auth_start(void * state, int method)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_START)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_start " "VNC client auth start state=%p method=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, method);
    }
}

static inline void trace_vnc_auth_start(void * state, int method)
{
    if (true) {
        _nocheck__trace_vnc_auth_start(state, method);
    }
}

#define TRACE_VNC_AUTH_PASS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_PASS) || \
    false)

static inline void _nocheck__trace_vnc_auth_pass(void * state, int method)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_PASS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_pass " "VNC client auth passed state=%p method=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, method);
    }
}

static inline void trace_vnc_auth_pass(void * state, int method)
{
    if (true) {
        _nocheck__trace_vnc_auth_pass(state, method);
    }
}

#define TRACE_VNC_AUTH_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_FAIL) || \
    false)

static inline void _nocheck__trace_vnc_auth_fail(void * state, int method, const char * message, const char * reason)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_FAIL)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_fail " "VNC client auth failed state=%p method=%d message=%s reason=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, method, message, reason);
    }
}

static inline void trace_vnc_auth_fail(void * state, int method, const char * message, const char * reason)
{
    if (true) {
        _nocheck__trace_vnc_auth_fail(state, method, message, reason);
    }
}

#define TRACE_VNC_AUTH_REJECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_REJECT) || \
    false)

static inline void _nocheck__trace_vnc_auth_reject(void * state, int expect, int got)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_REJECT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_reject " "VNC client auth rejected state=%p method expected=%d got=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, expect, got);
    }
}

static inline void trace_vnc_auth_reject(void * state, int expect, int got)
{
    if (true) {
        _nocheck__trace_vnc_auth_reject(state, expect, got);
    }
}

#define TRACE_VNC_AUTH_VENCRYPT_VERSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_VENCRYPT_VERSION) || \
    false)

static inline void _nocheck__trace_vnc_auth_vencrypt_version(void * state, int major, int minor)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_VENCRYPT_VERSION)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_vencrypt_version " "VNC client auth vencrypt version state=%p major=%d minor=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, major, minor);
    }
}

static inline void trace_vnc_auth_vencrypt_version(void * state, int major, int minor)
{
    if (true) {
        _nocheck__trace_vnc_auth_vencrypt_version(state, major, minor);
    }
}

#define TRACE_VNC_AUTH_VENCRYPT_SUBAUTH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_VENCRYPT_SUBAUTH) || \
    false)

static inline void _nocheck__trace_vnc_auth_vencrypt_subauth(void * state, int auth)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_VENCRYPT_SUBAUTH)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_vencrypt_subauth " "VNC client auth vencrypt subauth state=%p auth=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, auth);
    }
}

static inline void trace_vnc_auth_vencrypt_subauth(void * state, int auth)
{
    if (true) {
        _nocheck__trace_vnc_auth_vencrypt_subauth(state, auth);
    }
}

#define TRACE_VNC_AUTH_SASL_MECH_LIST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_MECH_LIST) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_mech_list(void * state, const char * mechs)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_MECH_LIST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_mech_list " "VNC client auth SASL state=%p mechlist=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, mechs);
    }
}

static inline void trace_vnc_auth_sasl_mech_list(void * state, const char * mechs)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_mech_list(state, mechs);
    }
}

#define TRACE_VNC_AUTH_SASL_MECH_CHOOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_MECH_CHOOSE) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_mech_choose(void * state, const char * mech)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_MECH_CHOOSE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_mech_choose " "VNC client auth SASL state=%p mech=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, mech);
    }
}

static inline void trace_vnc_auth_sasl_mech_choose(void * state, const char * mech)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_mech_choose(state, mech);
    }
}

#define TRACE_VNC_AUTH_SASL_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_START) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_start(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_START)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_start " "VNC client auth SASL start state=%p clientdata=%p clientlen=%zu serverdata=%p serverlen=%zu ret=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, clientdata, clientlen, serverdata, severlen, ret);
    }
}

static inline void trace_vnc_auth_sasl_start(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_start(state, clientdata, clientlen, serverdata, severlen, ret);
    }
}

#define TRACE_VNC_AUTH_SASL_STEP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_STEP) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_step(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_STEP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_step " "VNC client auth SASL step state=%p clientdata=%p clientlen=%zu serverdata=%p serverlen=%zu ret=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, clientdata, clientlen, serverdata, severlen, ret);
    }
}

static inline void trace_vnc_auth_sasl_step(void * state, const void * clientdata, size_t clientlen, const void * serverdata, size_t severlen, int ret)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_step(state, clientdata, clientlen, serverdata, severlen, ret);
    }
}

#define TRACE_VNC_AUTH_SASL_SSF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_SSF) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_ssf(void * state, int ssf)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_SSF)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_ssf " "VNC client auth SASL SSF state=%p size=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, ssf);
    }
}

static inline void trace_vnc_auth_sasl_ssf(void * state, int ssf)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_ssf(state, ssf);
    }
}

#define TRACE_VNC_AUTH_SASL_USERNAME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_USERNAME) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_username(void * state, const char * name)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_USERNAME)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_username " "VNC client auth SASL user state=%p name=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, name);
    }
}

static inline void trace_vnc_auth_sasl_username(void * state, const char * name)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_username(state, name);
    }
}

#define TRACE_VNC_AUTH_SASL_ACL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VNC_AUTH_SASL_ACL) || \
    false)

static inline void _nocheck__trace_vnc_auth_sasl_acl(void * state, int allow)
{
    if (trace_event_get_state(TRACE_VNC_AUTH_SASL_ACL)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:vnc_auth_sasl_acl " "VNC client auth SASL ACL state=%p allow=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , state, allow);
    }
}

static inline void trace_vnc_auth_sasl_acl(void * state, int allow)
{
    if (true) {
        _nocheck__trace_vnc_auth_sasl_acl(state, allow);
    }
}

#define TRACE_INPUT_EVENT_KEY_NUMBER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_KEY_NUMBER) || \
    false)

static inline void _nocheck__trace_input_event_key_number(int conidx, int number, const char * qcode, bool down)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_KEY_NUMBER)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_event_key_number " "con %d, key number 0x%x [%s], down %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , conidx, number, qcode, down);
    }
}

static inline void trace_input_event_key_number(int conidx, int number, const char * qcode, bool down)
{
    if (true) {
        _nocheck__trace_input_event_key_number(conidx, number, qcode, down);
    }
}

#define TRACE_INPUT_EVENT_KEY_QCODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_KEY_QCODE) || \
    false)

static inline void _nocheck__trace_input_event_key_qcode(int conidx, const char * qcode, bool down)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_KEY_QCODE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_event_key_qcode " "con %d, key qcode %s, down %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , conidx, qcode, down);
    }
}

static inline void trace_input_event_key_qcode(int conidx, const char * qcode, bool down)
{
    if (true) {
        _nocheck__trace_input_event_key_qcode(conidx, qcode, down);
    }
}

#define TRACE_INPUT_EVENT_BTN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_BTN) || \
    false)

static inline void _nocheck__trace_input_event_btn(int conidx, const char * btn, bool down)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_BTN)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_event_btn " "con %d, button %s, down %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , conidx, btn, down);
    }
}

static inline void trace_input_event_btn(int conidx, const char * btn, bool down)
{
    if (true) {
        _nocheck__trace_input_event_btn(conidx, btn, down);
    }
}

#define TRACE_INPUT_EVENT_REL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_REL) || \
    false)

static inline void _nocheck__trace_input_event_rel(int conidx, const char * axis, int value)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_REL)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_event_rel " "con %d, axis %s, value %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , conidx, axis, value);
    }
}

static inline void trace_input_event_rel(int conidx, const char * axis, int value)
{
    if (true) {
        _nocheck__trace_input_event_rel(conidx, axis, value);
    }
}

#define TRACE_INPUT_EVENT_ABS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_ABS) || \
    false)

static inline void _nocheck__trace_input_event_abs(int conidx, const char * axis, int value)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_ABS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_event_abs " "con %d, axis %s, value 0x%x" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , conidx, axis, value);
    }
}

static inline void trace_input_event_abs(int conidx, const char * axis, int value)
{
    if (true) {
        _nocheck__trace_input_event_abs(conidx, axis, value);
    }
}

#define TRACE_INPUT_EVENT_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_EVENT_SYNC) || \
    false)

static inline void _nocheck__trace_input_event_sync(void)
{
    if (trace_event_get_state(TRACE_INPUT_EVENT_SYNC)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_event_sync " "" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_input_event_sync(void)
{
    if (true) {
        _nocheck__trace_input_event_sync();
    }
}

#define TRACE_INPUT_MOUSE_MODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_INPUT_MOUSE_MODE) || \
    false)

static inline void _nocheck__trace_input_mouse_mode(int absolute)
{
    if (trace_event_get_state(TRACE_INPUT_MOUSE_MODE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:input_mouse_mode " "absolute %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , absolute);
    }
}

static inline void trace_input_mouse_mode(int absolute)
{
    if (true) {
        _nocheck__trace_input_mouse_mode(absolute);
    }
}

#define TRACE_QEMU_SPICE_ADD_MEMSLOT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_ADD_MEMSLOT) || \
    false)

static inline void _nocheck__trace_qemu_spice_add_memslot(int qid, uint32_t slot_id, unsigned long virt_start, unsigned long virt_end, int async)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_ADD_MEMSLOT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:qemu_spice_add_memslot " "%d %u: host virt 0x%lx - 0x%lx async=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , qid, slot_id, virt_start, virt_end, async);
    }
}

static inline void trace_qemu_spice_add_memslot(int qid, uint32_t slot_id, unsigned long virt_start, unsigned long virt_end, int async)
{
    if (true) {
        _nocheck__trace_qemu_spice_add_memslot(qid, slot_id, virt_start, virt_end, async);
    }
}

#define TRACE_QEMU_SPICE_DEL_MEMSLOT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DEL_MEMSLOT) || \
    false)

static inline void _nocheck__trace_qemu_spice_del_memslot(int qid, uint32_t gid, uint32_t slot_id)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DEL_MEMSLOT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:qemu_spice_del_memslot " "%d gid=%u sid=%u" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , qid, gid, slot_id);
    }
}

static inline void trace_qemu_spice_del_memslot(int qid, uint32_t gid, uint32_t slot_id)
{
    if (true) {
        _nocheck__trace_qemu_spice_del_memslot(qid, gid, slot_id);
    }
}

#define TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE) || \
    false)

static inline void _nocheck__trace_qemu_spice_create_primary_surface(int qid, uint32_t sid, void * surface, int async)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:qemu_spice_create_primary_surface " "%d sid=%u surface=%p async=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , qid, sid, surface, async);
    }
}

static inline void trace_qemu_spice_create_primary_surface(int qid, uint32_t sid, void * surface, int async)
{
    if (true) {
        _nocheck__trace_qemu_spice_create_primary_surface(qid, sid, surface, async);
    }
}

#define TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE) || \
    false)

static inline void _nocheck__trace_qemu_spice_destroy_primary_surface(int qid, uint32_t sid, int async)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:qemu_spice_destroy_primary_surface " "%d sid=%u async=%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , qid, sid, async);
    }
}

static inline void trace_qemu_spice_destroy_primary_surface(int qid, uint32_t sid, int async)
{
    if (true) {
        _nocheck__trace_qemu_spice_destroy_primary_surface(qid, sid, async);
    }
}

#define TRACE_QEMU_SPICE_WAKEUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_WAKEUP) || \
    false)

static inline void _nocheck__trace_qemu_spice_wakeup(uint32_t qid)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_WAKEUP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:qemu_spice_wakeup " "%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , qid);
    }
}

static inline void trace_qemu_spice_wakeup(uint32_t qid)
{
    if (true) {
        _nocheck__trace_qemu_spice_wakeup(qid);
    }
}

#define TRACE_QEMU_SPICE_CREATE_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SPICE_CREATE_UPDATE) || \
    false)

static inline void _nocheck__trace_qemu_spice_create_update(uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
    if (trace_event_get_state(TRACE_QEMU_SPICE_CREATE_UPDATE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:qemu_spice_create_update " "lr %d -> %d,  tb -> %d -> %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , left, right, top, bottom);
    }
}

static inline void trace_qemu_spice_create_update(uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
    if (true) {
        _nocheck__trace_qemu_spice_create_update(left, right, top, bottom);
    }
}

#define TRACE_KEYMAP_PARSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KEYMAP_PARSE) || \
    false)

static inline void _nocheck__trace_keymap_parse(const char * file)
{
    if (trace_event_get_state(TRACE_KEYMAP_PARSE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:keymap_parse " "file %s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , file);
    }
}

static inline void trace_keymap_parse(const char * file)
{
    if (true) {
        _nocheck__trace_keymap_parse(file);
    }
}

#define TRACE_KEYMAP_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KEYMAP_ADD) || \
    false)

static inline void _nocheck__trace_keymap_add(const char * type, int sym, int code, const char * line)
{
    if (trace_event_get_state(TRACE_KEYMAP_ADD)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:keymap_add " "%-6s sym=0x%04x code=0x%04x (line: %s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , type, sym, code, line);
    }
}

static inline void trace_keymap_add(const char * type, int sym, int code, const char * line)
{
    if (true) {
        _nocheck__trace_keymap_add(type, sym, code, line);
    }
}

#define TRACE_KEYMAP_UNMAPPED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KEYMAP_UNMAPPED) || \
    false)

static inline void _nocheck__trace_keymap_unmapped(int sym)
{
    if (trace_event_get_state(TRACE_KEYMAP_UNMAPPED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:keymap_unmapped " "sym=0x%04x" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , sym);
    }
}

static inline void trace_keymap_unmapped(int sym)
{
    if (true) {
        _nocheck__trace_keymap_unmapped(sym);
    }
}

#define TRACE_XKEYMAP_EXTENSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_EXTENSION) || \
    false)

static inline void _nocheck__trace_xkeymap_extension(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_EXTENSION)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:xkeymap_extension " "extension '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_xkeymap_extension(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_extension(name);
    }
}

#define TRACE_XKEYMAP_VENDOR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_VENDOR) || \
    false)

static inline void _nocheck__trace_xkeymap_vendor(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_VENDOR)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:xkeymap_vendor " "vendor '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_xkeymap_vendor(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_vendor(name);
    }
}

#define TRACE_XKEYMAP_KEYCODES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_KEYCODES) || \
    false)

static inline void _nocheck__trace_xkeymap_keycodes(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_KEYCODES)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:xkeymap_keycodes " "keycodes '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_xkeymap_keycodes(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_keycodes(name);
    }
}

#define TRACE_XKEYMAP_KEYMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XKEYMAP_KEYMAP) || \
    false)

static inline void _nocheck__trace_xkeymap_keymap(const char * name)
{
    if (trace_event_get_state(TRACE_XKEYMAP_KEYMAP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:xkeymap_keymap " "keymap '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_xkeymap_keymap(const char * name)
{
    if (true) {
        _nocheck__trace_xkeymap_keymap(name);
    }
}
#endif /* TRACE_UI_GENERATED_TRACERS_H */
