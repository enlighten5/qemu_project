/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_CHARDEV_GENERATED_TRACERS_H
#define TRACE_CHARDEV_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_WCT_INIT_EVENT;
extern TraceEvent _TRACE_WCT_CMD_RE_EVENT;
extern TraceEvent _TRACE_WCT_CMD_ST_EVENT;
extern TraceEvent _TRACE_WCT_CMD_SP_EVENT;
extern TraceEvent _TRACE_WCT_CMD_TS_EVENT;
extern TraceEvent _TRACE_WCT_CMD_OTHER_EVENT;
extern TraceEvent _TRACE_WCT_SPEED_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_WRITE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_READ_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_REGISTER_INTERFACE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_UNREGISTER_INTERFACE_EVENT;
extern TraceEvent _TRACE_SPICE_VMC_EVENT_EVENT;
extern uint16_t _TRACE_WCT_INIT_DSTATE;
extern uint16_t _TRACE_WCT_CMD_RE_DSTATE;
extern uint16_t _TRACE_WCT_CMD_ST_DSTATE;
extern uint16_t _TRACE_WCT_CMD_SP_DSTATE;
extern uint16_t _TRACE_WCT_CMD_TS_DSTATE;
extern uint16_t _TRACE_WCT_CMD_OTHER_DSTATE;
extern uint16_t _TRACE_WCT_SPEED_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_WRITE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_READ_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_REGISTER_INTERFACE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_UNREGISTER_INTERFACE_DSTATE;
extern uint16_t _TRACE_SPICE_VMC_EVENT_DSTATE;
#define TRACE_WCT_INIT_ENABLED 1
#define TRACE_WCT_CMD_RE_ENABLED 1
#define TRACE_WCT_CMD_ST_ENABLED 1
#define TRACE_WCT_CMD_SP_ENABLED 1
#define TRACE_WCT_CMD_TS_ENABLED 1
#define TRACE_WCT_CMD_OTHER_ENABLED 1
#define TRACE_WCT_SPEED_ENABLED 1
#define TRACE_SPICE_VMC_WRITE_ENABLED 1
#define TRACE_SPICE_VMC_READ_ENABLED 1
#define TRACE_SPICE_VMC_REGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_UNREGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_EVENT_ENABLED 1
#include "qemu/log.h"


#define TRACE_WCT_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_INIT) || \
    false)

static inline void _nocheck__trace_wct_init(void)
{
    if (trace_event_get_state(TRACE_WCT_INIT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_init " "" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_wct_init(void)
{
    if (true) {
        _nocheck__trace_wct_init();
    }
}

#define TRACE_WCT_CMD_RE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_RE) || \
    false)

static inline void _nocheck__trace_wct_cmd_re(void)
{
    if (trace_event_get_state(TRACE_WCT_CMD_RE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_cmd_re " "" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_wct_cmd_re(void)
{
    if (true) {
        _nocheck__trace_wct_cmd_re();
    }
}

#define TRACE_WCT_CMD_ST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_ST) || \
    false)

static inline void _nocheck__trace_wct_cmd_st(void)
{
    if (trace_event_get_state(TRACE_WCT_CMD_ST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_cmd_st " "" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_wct_cmd_st(void)
{
    if (true) {
        _nocheck__trace_wct_cmd_st();
    }
}

#define TRACE_WCT_CMD_SP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_SP) || \
    false)

static inline void _nocheck__trace_wct_cmd_sp(void)
{
    if (trace_event_get_state(TRACE_WCT_CMD_SP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_cmd_sp " "" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_wct_cmd_sp(void)
{
    if (true) {
        _nocheck__trace_wct_cmd_sp();
    }
}

#define TRACE_WCT_CMD_TS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_TS) || \
    false)

static inline void _nocheck__trace_wct_cmd_ts(int input)
{
    if (trace_event_get_state(TRACE_WCT_CMD_TS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_cmd_ts " "0x%02x" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , input);
    }
}

static inline void trace_wct_cmd_ts(int input)
{
    if (true) {
        _nocheck__trace_wct_cmd_ts(input);
    }
}

#define TRACE_WCT_CMD_OTHER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_CMD_OTHER) || \
    false)

static inline void _nocheck__trace_wct_cmd_other(const char * cmd)
{
    if (trace_event_get_state(TRACE_WCT_CMD_OTHER)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_cmd_other " "%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , cmd);
    }
}

static inline void trace_wct_cmd_other(const char * cmd)
{
    if (true) {
        _nocheck__trace_wct_cmd_other(cmd);
    }
}

#define TRACE_WCT_SPEED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_WCT_SPEED) || \
    false)

static inline void _nocheck__trace_wct_speed(int speed)
{
    if (trace_event_get_state(TRACE_WCT_SPEED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:wct_speed " "%d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , speed);
    }
}

static inline void trace_wct_speed(int speed)
{
    if (true) {
        _nocheck__trace_wct_speed(speed);
    }
}

#define TRACE_SPICE_VMC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_WRITE) || \
    false)

static inline void _nocheck__trace_spice_vmc_write(ssize_t out, int len)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_WRITE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:spice_vmc_write " "spice wrote %zd of requested %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , out, len);
    }
}

static inline void trace_spice_vmc_write(ssize_t out, int len)
{
    if (true) {
        _nocheck__trace_spice_vmc_write(out, len);
    }
}

#define TRACE_SPICE_VMC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_READ) || \
    false)

static inline void _nocheck__trace_spice_vmc_read(int bytes, int len)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_READ)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:spice_vmc_read " "spice read %d of requested %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , bytes, len);
    }
}

static inline void trace_spice_vmc_read(int bytes, int len)
{
    if (true) {
        _nocheck__trace_spice_vmc_read(bytes, len);
    }
}

#define TRACE_SPICE_VMC_REGISTER_INTERFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_REGISTER_INTERFACE) || \
    false)

static inline void _nocheck__trace_spice_vmc_register_interface(void * scd)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_REGISTER_INTERFACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:spice_vmc_register_interface " "spice vmc registered interface %p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , scd);
    }
}

static inline void trace_spice_vmc_register_interface(void * scd)
{
    if (true) {
        _nocheck__trace_spice_vmc_register_interface(scd);
    }
}

#define TRACE_SPICE_VMC_UNREGISTER_INTERFACE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_UNREGISTER_INTERFACE) || \
    false)

static inline void _nocheck__trace_spice_vmc_unregister_interface(void * scd)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_UNREGISTER_INTERFACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:spice_vmc_unregister_interface " "spice vmc unregistered interface %p" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , scd);
    }
}

static inline void trace_spice_vmc_unregister_interface(void * scd)
{
    if (true) {
        _nocheck__trace_spice_vmc_unregister_interface(scd);
    }
}

#define TRACE_SPICE_VMC_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPICE_VMC_EVENT) || \
    false)

static inline void _nocheck__trace_spice_vmc_event(int event)
{
    if (trace_event_get_state(TRACE_SPICE_VMC_EVENT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:spice_vmc_event " "spice vmc event %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , event);
    }
}

static inline void trace_spice_vmc_event(int event)
{
    if (true) {
        _nocheck__trace_spice_vmc_event(event);
    }
}
#endif /* TRACE_CHARDEV_GENERATED_TRACERS_H */
